// Generated by CoffeeScript 1.6.3
(function() {
  var GenericSprite, Interaction, Rule, SpriteFactory, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GenericSprite = (function(_super) {
    __extends(GenericSprite, _super);

    function GenericSprite(spriteId) {
      var hOff, imHeight, img, imgHeight, imgWidth, programming, shapeParams, tmpX, tmpY, wOff,
        _this = this;
      this.spriteId = spriteId;
      img = new Image();
      img.src = 'http://' + window.location.host + '/media/sprites/' + this.imageId + '.jpg';
      if (this.imageId !== void 0) {
        imgWidth = img.width;
        imHeight = img.height;
        wOff = img.width / 2;
        hOff = img.height / 2;
      } else {
        imgWidth = 100;
        imgHeight = 50;
        wOff = 50;
        hOff = 25;
      }
      shapeParams = {
        x: 50,
        y: 50,
        width: imgWidth,
        height: imgHeight,
        fill: 'black',
        image: img,
        strokeWidth: 0,
        draggable: true,
        offset: [wOff, hOff]
      };
      Kinetic.Image.call(this, shapeParams);
      programming = false;
      tmpX = 0;
      tmpY = 0;
      this.on('dblclick dbltap', function(event) {
        var myTransform;
        event.stopPropagation();
        event.preventDefault();
        if (!programming) {
          console.log("remember this", _this.getAbsolutePosition().x, _this.getAbsolutePosition().y);
          tmpX = _this.getAbsolutePosition().x;
          tmpY = _this.getAbsolutePosition().y;
          _this.moveTo(rulesLayer);
        } else {
          myTransform = {
            dx: _this.getAbsolutePosition().x - tmpX,
            dy: _this.getAbsolutePosition().y - tmpY
          };
          _this.addRule(new Rule(myTransform));
          console.log("analyze diff", tmpX, _this.getAbsolutePosition().x, tmpX - _this.getAbsolutePosition().x);
          _this.setPosition(tmpX, tmpY);
          _this.moveTo(layer);
        }
        rulesLayer.draw();
        programming = !programming;
        return console.log(programming);
      });
    }

    GenericSprite.prototype.applyRules = function(environment) {
      var rule, _i, _len, _ref, _results;
      _ref = this._rules;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        _results.push(rule.act(this, environment));
      }
      return _results;
    };

    GenericSprite.prototype.addRule = function(rule) {
      this._rules.push(rule);
      return this._rules.length - 1;
    };

    GenericSprite.prototype.setRule = function(index, rule) {
      if (this._rules[index] !== void 0) {
        return this._rules[index] = rule;
      } else {
        throw Error("The rule index " + index + " doesn't exist.");
      }
    };

    GenericSprite.prototype.applyTransform = function(transform) {
      var scale;
      this.setX(this.getX() + transform.dx);
      this.setY(this.getY() + transform.dy);
      this.rotate(transform.dr);
      scale = this.getScale();
      return this.setScale(scale.x * transform.dxScale, scale.y * transform.dyScale);
    };

    return GenericSprite;

  })(Kinetic.Image);

  SpriteFactory = function(spriteType, imageId) {
    var Sprite, _ref;
    Sprite = (function(_super) {
      __extends(Sprite, _super);

      function Sprite() {
        _ref = Sprite.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Sprite.prototype.spriteType = spriteType;

      Sprite.prototype.imageId = imageId;

      Sprite.prototype._rules = [];

      return Sprite;

    })(GenericSprite);
    return Sprite;
  };

  Rule = (function() {
    var defaultTransform;

    defaultTransform = {
      dx: 0,
      dy: 0,
      dr: 0,
      dxScale: 1,
      dyScale: 1
    };

    function Rule(transform) {
      var p, v, _ref;
      _ref = this.defaultTransform;
      for (p in _ref) {
        v = _ref[p];
        if (!(p in transform)) {
          transform[p] = v;
        }
      }
      this.transform = transform;
    }

    Rule.prototype.act = function(sprite, environment) {
      return sprite.applyTransform(this.transform);
    };

    return Rule;

  })();

  Interaction = (function(_super) {
    __extends(Interaction, _super);

    function Interaction() {
      _ref = Interaction.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Interaction.prototype.setEnvironment = function(requiredEnvironment) {
      this.requiredEnvironment = requiredEnvironment;
    };

    Interaction.prototype.act = function(sprite, environment) {
      var minCount, shouldAct, spriteType, _ref1;
      shouldAct = true;
      _ref1 = this.requiredEnvironment;
      for (spriteType in _ref1) {
        minCount = _ref1[spriteType];
        if (!(spriteType in environment)) {
          shouldAct = false;
        } else if (environment[spriteType] < minCount) {
          shouldAct = false;
        }
      }
      if (shouldAct) {
        return sprite.applyTransform(this.transform);
      }
    };

    return Interaction;

  })(Rule);

  window.spriteList = [];

  window.spriteTypeList = [];

  window.tick = function() {
    var child, programming, sprite, _i, _j, _len, _len1, _ref1, _ref2;
    if (programming) {
      programming = false;
      _ref1 = rulesLayer.getChildren();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        child = _ref1[_i];
        child.moveTo(layer);
      }
      rulesLayer.draw();
    }
    _ref2 = window.spriteList;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      sprite = _ref2[_j];
      sprite.applyRules();
    }
    return stage.draw();
  };

  window.loadSpriteTypes = function() {
    var spriteTypeList;
    console.log("loading sprite types");
    spriteTypeList = [];
    return $("#sprite_drawer *").each(function(i, sprite) {
      spriteTypeList.push(SpriteFactory($(sprite).attr("data-frame-id"), $(sprite).attr("data-frame-id")));
      $(sprite).bind('dragend', function(e) {
        var newSprite;
        e.preventDefault();
        console.log("sprite ", $(sprite).attr("data-frame-id"), " added");
        newSprite = new spriteTypeList[i];
        console.log("dropped dragend", e.originalEvent.clientX, e.originalEvent.clientY);
        newSprite.setPosition(e.originalEvent.clientX, e.originalEvent.clientY);
        layer.add(newSprite);
        spriteList.push(newSprite);
        return stage.draw();
      });
      $(sprite).bind('touchstart', function(e) {
        return e.preventDefault();
      });
      $(sprite).bind('touchmove', function(e) {
        return e.preventDefault();
      });
      return $(sprite).bind('touchend', function(e) {
        var dropX, dropY, newSprite;
        console.log("sprite ", $(sprite).attr("data-frame-id"), " added");
        newSprite = new spriteTypeList[i];
        dropX = e.originalEvent.changedTouches[0].pageX;
        dropY = e.originalEvent.changedTouches[0].pageY;
        newSprite.setPosition(dropX, dropY);
        layer.add(newSprite);
        spriteList.push(newSprite);
        return stage.draw();
      });
      /* I think we don't need these anymore, but just in case
      $(sprite).bind 'dbltap', (e) -> 
          alert "sprite ", $(sprite).attr("data-frame-id"),  " added dbltap"
          # this should be ok now because they've been pished in the right order? hmm...
          newSprite = new spriteTypeList[i] 
          layer.add( newSprite )
          spriteList.push( newSprite )
          layer.draw()
          #e.stopPropagation()
          e.preventDefault();
          
      $(sprite).bind 'dblclick', (e) -> 
          console.log "sprite ", $(sprite).attr("data-frame-id"),  " added dblclick"
          # this should be ok now because they've been pished in the right order? hmm...
          newSprite = new spriteTypeList[i] 
          layer.add( newSprite )
          spriteList.push( newSprite )
          layer.draw()
          #e.stopPropagation()
          e.preventDefault();
      */

    });
  };

  window.init = function() {
    var moveDown, moveRight, spin, stretchy;
    window.Star = SpriteFactory('Star');
    window.starA = new Star('A');
    window.spriteList.push(starA);
    layer.add(starA);
    stage.add(layer);
    moveRight = new Rule({
      dx: 10
    });
    starA.addRule(moveRight);
    moveDown = new Rule({
      dy: 10
    });
    starA.addRule(moveDown);
    spin = new Rule({
      dr: Math.PI / 6
    });
    starA.addRule(spin);
    stretchy = new Rule({
      dyScale: 1.1
    });
    return starA.addRule(stretchy);
  };

}).call(this);
