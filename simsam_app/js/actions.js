// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Action = (function() {
    function Action() {}

    Action.prototype.act = function(sprite) {
      return console.log("Action is an abstract class, don't use it.");
    };

    Action.prototype.restoreFromJSON = function(data) {};

    return Action;

  })();

  window.DeleteAction = (function(_super) {
    __extends(DeleteAction, _super);

    function DeleteAction() {
      _ref = DeleteAction.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DeleteAction.prototype.act = function(sprite) {
      console.log('DeleteAction: act');
      return spriteDeleteList.push(sprite);
    };

    DeleteAction.prototype.toJSON = function() {
      var object;
      object = {};
      object.type = 'delete';
      return object;
    };

    return DeleteAction;

  })(Action);

  window.CloneAction = (function(_super) {
    __extends(CloneAction, _super);

    function CloneAction() {}

    CloneAction.prototype.act = function(sprite) {
      var dx, dy, newSprite, sLeft, sTop, theta;
      if ((Math.random() * 100) > sprite.cloneFrequency) {
        return;
      }
      if (window.spriteTypeList[sprite.spriteType].prototype._count >= window.maxSprites) {
        return;
      }
      newSprite = new window.spriteTypeList[sprite.spriteType];
      spriteList.push(newSprite);
      newSprite.setTop(sprite.getTop() + Math.random() * 76 - 38);
      newSprite.setLeft(sprite.getLeft() + Math.random() * 76 - 38);
      theta = sprite.getAngle() * Math.PI / 180;
      sTop = sprite.cloneTranslate.top;
      sLeft = sprite.cloneTranslate.left;
      dx = sLeft * Math.cos(theta) - sTop * Math.sin(theta);
      dy = sLeft * Math.sin(theta) + sTop * Math.cos(theta);
      newSprite.setTop(sprite.getTop() + dy);
      newSprite.setLeft(sprite.getLeft() + dx);
      newSprite.setAngle(sprite.getAngle() + sprite.cloneTranslate.rotate);
      canvas.add(newSprite);
      return canvas.renderAll();
    };

    CloneAction.prototype.toJSON = function() {
      var object;
      object = {};
      object.type = 'clone';
      return object;
    };

    CloneAction.prototype.restoreFromJSON = function(data) {
      return CloneAction.__super__.restoreFromJSON.call(this);
    };

    return CloneAction;

  })(Action);

  window.SproutAction = (function(_super) {
    __extends(SproutAction, _super);

    SproutAction.targetClassType = null;

    function SproutAction() {}

    SproutAction.prototype.act = function(sprite) {
      var dx, dy, newSprite, sLeft, sTop, sType, theta;
      if ((Math.random() * 100) > sprite.cloneFrequency) {
        return;
      }
      if (window.spriteTypeList[sprite.spriteType].prototype._count >= window.maxSprites) {
        return;
      }
      sType = this.targetClassType;
      newSprite = new window.spriteTypeList[sType];
      console.log('Creating new object of type ' + sType);
      spriteList.push(newSprite);
      theta = sprite.getAngle() * Math.PI / 180;
      sTop = sprite.cloneTranslate.top;
      sLeft = sprite.cloneTranslate.left;
      dx = sLeft * Math.cos(theta) - sTop * Math.sin(theta);
      dy = sLeft * Math.sin(theta) + sTop * Math.cos(theta);
      newSprite.setTop(sprite.getTop() + dy);
      newSprite.setLeft(sprite.getLeft() + dx);
      newSprite.setAngle(sprite.getAngle() + sprite.cloneTranslate.rotate);
      canvas.add(newSprite);
      newSprite.setCoords();
      return canvas.renderAll();
    };

    SproutAction.prototype.setTarget = function(targetValue) {
      return this.targetClassType = targetValue;
    };

    SproutAction.prototype.getTarget = function() {
      return this.targetClassType;
    };

    SproutAction.prototype.toJSON = function() {
      var object;
      object = {};
      object.type = 'sprout';
      object.targetType = this.targetClassType;
      return object;
    };

    SproutAction.prototype.restoreFromJSON = function(data) {
      this.targetClassType = data.targetType;
      return SproutAction.__super__.restoreFromJSON.call(this);
    };

    return SproutAction;

  })(Action);

  window.TransformAction = (function(_super) {
    __extends(TransformAction, _super);

    function TransformAction() {
      this.transform = {
        dx: 0,
        dy: 0,
        dr: 0,
        dxScale: 1,
        dyScale: 1
      };
      this.stateRandom = false;
      this.randomRange = 15;
    }

    TransformAction.prototype.setTransformDelta = function(start, end) {
      var dx, dy, rad, x, y;
      dx = end.left - start.left;
      dy = end.top - start.top;
      rad = start.angle * Math.PI / 180;
      x = dx * Math.cos(-rad) - dy * Math.sin(-rad);
      y = -dx * Math.sin(rad) + dy * Math.cos(rad);
      this.transform.dxScale = end.width - start.width;
      this.transform.dyScale = end.height - start.height;
      this.transform.dx = x;
      this.transform.dy = y;
      return this.transform.dr = end.angle - start.angle;
    };

    TransformAction.prototype.act = function(sprite) {
      var dx, dy, range, rawAngle, theta;
      console.log('TransformAction: ' + sprite.spriteType);
      rawAngle = sprite.getAngle();
      if (this.stateRandom) {
        range = this.randomRange / 180;
        theta = (sprite.getAngle() + this.transform.dr) * Math.PI / 180 + (Math.random() * range - range / 2) * (2 * Math.PI);
      } else {
        theta = (sprite.getAngle() + this.transform.dr) * Math.PI / 180;
      }
      if (isNaN(theta)) {
        theta = 0;
      }
      dx = this.transform.dx * Math.cos(theta) - this.transform.dy * Math.sin(theta);
      dy = this.transform.dx * Math.sin(theta) + this.transform.dy * Math.cos(theta);
      sprite.set({
        left: sprite.getLeft() + dx,
        top: sprite.getTop() + dy,
        angle: sprite.getAngle() - this.transform.dr,
        width: sprite.width + this.transform.dxScale,
        height: sprite.height + this.transform.dyScale
      });
      sprite.setAngle(theta * 180 / Math.PI);
      return sprite.setCoords();
    };

    TransformAction.prototype.toJSON = function() {
      var object;
      object = {};
      object.type = 'transform';
      object.stateRandom = this.stateRandom;
      object.randomRange = this.randomRange;
      object.transform = this.transform;
      return object;
    };

    TransformAction.prototype.restoreFromJSON = function(data) {
      this.stateRandom = data.stateRandom;
      this.randomRange = data.randomRange;
      return this.transform = data.transform;
    };

    return TransformAction;

  })(Action);

}).call(this);

/*
//@ sourceMappingURL=actions.map
*/
