// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.TextLabel = (function(_super) {

    __extends(TextLabel, _super);

    function TextLabel(textBody) {
      var cb, imgElement;
      this.closeButton = null;
      this.group = null;
      TextLabel.__super__.constructor.call(this, textBody, {
        textAlign: 'center',
        originX: 'center',
        originY: 'center',
        fontFamily: 'Averia Sans Libre'
      });
      imgElement = document.createElement('img');
      imgElement.src = '/static/images/close-24.png';
      cb = new fabric.Image(imgElement, {
        originX: 'left',
        originY: 'top',
        left: this.getWidth() / 2 - 12,
        top: -this.getHeight() / 2,
        opacity: 0
      });
      this.closeButton = cb;
      canvas.bringToFront(cb);
      this.group = new TextGroup(this, [this, cb], {
        left: 100,
        top: 100
      });
    }

    TextLabel.prototype.addToCanvas = function() {
      return canvas.add(this.group);
    };

    TextLabel.prototype.setLeft = function(pos) {
      return this.group.setLeft(pos);
    };

    TextLabel.prototype.setTop = function(pos) {
      return this.group.setTop(pos);
    };

    TextLabel.prototype.modified = function() {};

    TextLabel.prototype.selected = function() {
      console.log('I was selected: opacity 1');
      this.closeButton.set('opacity', 1);
      return canvas.renderAll();
    };

    TextLabel.prototype.cleared = function() {
      this.closeButton.set('opacity', 0);
      return canvas.renderAll();
    };

    TextLabel.prototype.saveToJSON = function() {
      var jsonObj;
      jsonObj = {};
      return jsonObj['fabric'] = JSON.stringify(this.toJSON());
    };

    TextLabel.prototype.restoreFromJSON = function(json) {
      var fabricObj;
      fabricObj = JSON.parse(json['fabric']);
      this.constructor.fromObject(fabricObj);
      this._initConfig(fabricObj);
      canvas.add(this);
      return this.setCoords();
    };

    return TextLabel;

  })(fabric.Text);

  window.TextGroup = (function(_super) {

    __extends(TextGroup, _super);

    function TextGroup(text, list, object) {
      this.text = text;
      TextGroup.__super__.constructor.call(this, list, object);
    }

    TextGroup.prototype.modified = function() {
      return this.text.modified();
    };

    TextGroup.prototype.selected = function() {
      return this.text.selected();
    };

    TextGroup.prototype.cleared = function() {
      return this.text.cleared();
    };

    TextGroup.prototype.setText = function(text) {
      return this.text.setText(text);
    };

    TextGroup.prototype.getText = function() {
      return this.text.getText();
    };

    TextGroup.prototype.shouldClose = function(point) {
      var cb;
      cb = this.text.closeButton;
      console.log('closeClick test: L: ' + cb.getLeft() + ' T: ' + cb.getTop() + ' point: ' + point.x + ', ' + point.y);
      if (cb.containsPoint(point)) {
        canvas.remove(this.text);
        canvas.remove(cb);
        return canvas.remove(this);
      }
    };

    return TextGroup;

  })(fabric.Group);

}).call(this);
