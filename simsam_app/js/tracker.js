// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sparkOpt = {
    width: '40px',
    lineColor: '#444',
    fillColor: '#888',
    spotColor: false,
    minSpotColor: false,
    maxSpotColor: false,
    chartRangeMinX: 0
  };

  window.Tracker = (function() {
    Tracker.prototype.height = 30;

    function Tracker() {
      this.parent = null;
      this.element = null;
      this.count = 0;
      this.targetSprite = null;
      this.history = [0];
      this.latched = false;
      this.latchedList = {};
    }

    Tracker.prototype.createElement = function(sourceId, target) {
      var className, el;
      el = document.createElement('div');
      className = 'measure-follow';
      if (sourceId === 'iact_toggle') {
        el.innerHTML = '';
      } else {
        el.innerHTML = 0;
      }
      className = className + ' iact';
      el.className = className;
      el["data-follows"] = target.spriteId;
      $(el).css({
        position: 'absolute',
        width: '40px',
        height: '' + this.height + 'px'
      });
      $(el).css('top', target.getTop() + target.getHeight() / 2 - this.height);
      $(el).css('left', target.getLeft() + target.getWidth() / 2);
      $('#construction_frame').append(el);
      this.element = el;
      return target.countElement = this;
    };

    Tracker.prototype.update = function() {
      var left, top;
      top = this.parent.getTop() + this.parent.getHeight() / 2 - this.height;
      left = this.parent.getLeft() + this.parent.getWidth() / 2;
      $(this.element).css({
        top: top,
        left: left
      });
      return $(this.element).html(this.count);
    };

    Tracker.prototype.clear = function() {
      this.history = [0];
      return this.count = 0;
    };

    Tracker.prototype.remove = function() {
      $(this.element).remove();
      if (this.parent.measureObject === this) {
        return this.parent.measureObject = null;
      }
    };

    Tracker.prototype.interactCheck = function() {
      var sprite, uuid, _i, _len, _ref;
      _ref = window.spriteList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sprite = _ref[_i];
        if (sprite.spriteType !== this.targetSprite.spriteType) {
          continue;
        }
        uuid = sprite.uniqueId;
        if (this.parent.trueIntersectsWithObject(sprite)) {
          if (!this.latchedList[uuid]) {
            this.count += 1;
            this.latchedList[uuid] = true;
          }
        } else {
          this.latchedList[uuid] = false;
        }
      }
      this.history.push(this.count);
      return this.update();
    };

    Tracker.prototype.interactObjectCheck = function() {
      if (this.parent.trueIntersectsWithObject(this.targetSprite)) {
        if (!this.latched) {
          this.count += 1;
          this.latched = true;
        }
      } else {
        this.latched = false;
      }
      this.history.push(this.count);
      return this.update();
    };

    return Tracker;

  })();

  window.ChartTracker = (function(_super) {
    __extends(ChartTracker, _super);

    function ChartTracker() {
      return ChartTracker.__super__.constructor.apply(this, arguments);
    }

    ChartTracker.prototype.update = function() {
      var left, top;
      top = this.parent.getTop() + this.parent.getHeight() / 2 - this.height;
      left = this.parent.getLeft() + this.parent.getWidth() / 2;
      $(this.element).css({
        top: top,
        left: left
      });
      return $(this.element).sparkline(this.history, sparkOpt);
    };

    ChartTracker.prototype.createElement = function(sourceId, targetId) {
      ChartTracker.__super__.createElement.call(this, sourceId, targetId);
      return $(this.element).html('');
    };

    return ChartTracker;

  })(Tracker);

}).call(this);
